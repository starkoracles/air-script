use crate::{
    ast::{
        boundary_constraints::{Boundary, BoundaryConstraint, BoundaryStmt},
        integrity_constraints::{ConstraintType, IntegrityConstraint, IntegrityStmt},
        build_trace_bindings, AccessType, SymbolAccess, ConstantBinding, ConstantValueExpr, 
        ComprehensionContext, Expression, EvaluatorFunction, EvaluatorFunctionCall, Identifier, 
        TraceAccess, Iterable, ListComprehension, ListFolding, ListFoldingValueExpr,
        PeriodicColumn, PublicInput, RandBinding, RandomValues, Range, Source, SourceSection, 
        TraceBinding, VariableBinding, VariableValueExpr, 
    }, error::{Error, ParseError::*}, lexer::Token
};
use std::str::FromStr;
use lalrpop_util::ParseError;

grammar;

// AST NODE
// ================================================================================================

pub Source: Source = {
    SourceSection* => Source(<>)
}

SourceSection: SourceSection = {
    AirDef => SourceSection::AirDef(<>),
    Constant => SourceSection::Constant(<>),
    Trace => SourceSection::Trace(<>),
    PublicInputs => SourceSection::PublicInputs(<>),
    PeriodicColumns => SourceSection::PeriodicColumns(<>),
    RandomValues => SourceSection::RandomValues(<>),
    EvaluatorFunction => SourceSection::EvaluatorFunction(<>),
    BoundaryConstraints => SourceSection::BoundaryConstraints(<>),
    IntegrityConstraints => SourceSection::IntegrityConstraints(<>),
}

// AIR DEF
// ================================================================================================

AirDef: Identifier = {
    "def" <f: Identifier> => f
}

// TRACE COLUMNS
// ================================================================================================

Trace: Vec<Vec<TraceBinding>> = {
    "trace_columns" ":" <main_cols: MainTraceBindings?> <aux_cols: AuxTraceBindings?> =>?
        match (main_cols, aux_cols) {
            (Some(main_cols), Some(aux_cols)) => Ok(vec![main_cols, aux_cols]),
            (Some(main_cols), None) => Ok(vec![main_cols]),
            (None, Some(_aux_cols)) => Err(ParseError::User {
                error: Error::ParseError(
                    MissingMainTraceCols("Declaration of main trace columns is required".to_string())
                )
            }),
            (None, None) => Err(ParseError::User {
                error: Error::ParseError(InvalidTraceCols("Trace Columns cannot be empty".to_string()))
            })
        } 
}

MainTraceBindings: Vec<TraceBinding> = {
    "main" ":" <main_cols: Vector<TraceBinding>> => build_trace_bindings(0, main_cols),
}

AuxTraceBindings: Vec<TraceBinding> = {
    "aux" ":" <aux_cols: Vector<TraceBinding>> => build_trace_bindings(1, aux_cols),
}

TraceBinding: (Identifier, u64) = {
    <name: Identifier> => (name, 1),
    <name: Identifier> <size: Size> => (name, size)
}

// CONSTANTS
// ================================================================================================

Constant: ConstantBinding = {
    "const" <name: ConstName> "=" <scalar_value: Num_u64> => 
        ConstantBinding::new(name, ConstantValueExpr::Scalar(scalar_value)),
    "const" <name: ConstName> "=" <vector_value: Vector<Num_u64>> =>
        ConstantBinding::new(name, ConstantValueExpr::Vector(vector_value)),
    "const" <name: ConstName> "=" <matrix_value: Matrix<Num_u64>> =>
        ConstantBinding::new(name, ConstantValueExpr::Matrix(matrix_value)),
}

ConstName: Identifier = {
    <name: Identifier> =>? if name.0.chars().all(|v| v.is_uppercase()) {
        Ok(Identifier(name.to_string()))
    } else {
        Err(ParseError::User {
            error: Error::ParseError(InvalidConst(
                format!("The constant name should be uppercase: {}", <>).to_string()
            ))
        })
    }
}

// PUBLIC INPUTS
// ================================================================================================

// At least one public input is required.
PublicInputs: Vec<PublicInput> = {
    "public_inputs" ":" <pub_inputs: PublicInput+> => pub_inputs
}

PublicInput: PublicInput = {
    <name: Identifier> ":" <size: Size> => PublicInput::new(name, size),
}

// PERIODIC COLUMNS
// ================================================================================================

// Periodic columns are not required, and there is no limit to the number that can be provided.
PeriodicColumns: Vec<PeriodicColumn> = {
    "periodic_columns" ":" <periodic_columns: PeriodicColumn*> => periodic_columns
}

PeriodicColumn: PeriodicColumn = {
    <name: Identifier> ":" <values: Vector<Num_u64>> =>
        PeriodicColumn::new(name, values),
}

// RANDOM VALUES
// ================================================================================================

RandomValues: RandomValues = {
    "random_values" ":" <rand_values: RandValuesDecl+> =>? match rand_values.len() {
        1 => Ok(rand_values[0].clone()),
        _ => Err(ParseError::User{
            error: Error::ParseError(
                InvalidRandomValues("No more than one set of random values can be declared".to_string())
            )
        })
    }
}

RandValuesDecl: RandomValues = {
    <name: Identifier> ":" <size: Size> => RandomValues::new(name, size, vec![]),
    <Identifier> ":" "[" "]" =>? Err(
        ParseError::User{
            error: Error::ParseError(
                InvalidRandomValues(
                    "Random Values section cannot be empty".to_string()
                )
            )
        }
    ),
    <name: Identifier> ":" <rand_vec: Vector<RandElem>> =>
        RandomValues::new(name, rand_vec.iter().map(|v| v.size()).sum(), rand_vec)
}

RandElem: RandBinding = {
    <name: Identifier> => RandBinding::new(name, 1),
    <name: Identifier> <size: Size> => RandBinding::new(name, size)
}

// EVALUATOR FUNCTIONS
// ================================================================================================

EvaluatorFunction: EvaluatorFunction = {
    "ev" <evaluator_fn_name: Identifier> "(" <main_cols: MainTraceBindings> "," <aux_cols: AuxTraceBindings> ")" ":"
        <integrity_stmts: IntegrityStmts> => {
            let mut cols = main_cols;
            cols.extend(aux_cols);
            EvaluatorFunction::new(
                evaluator_fn_name,
                cols,
                integrity_stmts)
        },
    "ev" <evaluator_fn_name: Identifier> "(" <main_cols: MainTraceBindings> ")" ":"
        <integrity_stmts: IntegrityStmts> => 
            EvaluatorFunction::new(
                evaluator_fn_name,
                main_cols,
                integrity_stmts),
    "ev" <evaluator_fn_name: Identifier> "(" <aux_cols: AuxTraceBindings> ")" ":"
        <integrity_stmts: IntegrityStmts> =>
            EvaluatorFunction::new(
                evaluator_fn_name,
                aux_cols,
                integrity_stmts),
}

// BOUNDARY STATEMENTS
// ================================================================================================

BoundaryConstraints: Vec<BoundaryStmt> = {
    "boundary_constraints" ":" <boundary_stmts: BoundaryStmt+> =>? {
        // check if at least one boundary constraint is defined
        let boundary_constraints_exist = boundary_stmts.iter().any(|stmt| match stmt {
            BoundaryStmt::Constraint(_) | BoundaryStmt::ConstraintComprehension(_, _) => true,
            _ => false,
        });
        if !boundary_constraints_exist {
            return Err(ParseError::User {
                error: Error::ParseError(
                    MissingBoundaryConstraint(
                        "Declaration of at least one boundary constraint is required".to_string()
                    )
                )
            });
        }
        Ok(boundary_stmts)
    }
}

BoundaryStmt: BoundaryStmt = {
    "let" <name: Identifier> "=" <boundary_variable_type: BoundaryVariableType> =>
        BoundaryStmt::VariableBinding(VariableBinding::new(name, boundary_variable_type)),
    "enf" <boundary_constraint: BoundaryConstraintExpr> =>
        BoundaryStmt::Constraint(boundary_constraint),
    "enf" <boundary_constraint: BoundaryConstraintExpr>
        <comprehension: ConstraintComprehension<BoundaryExpr>> =>
        BoundaryStmt::ConstraintComprehension(boundary_constraint, comprehension),
}

BoundaryConstraintExpr: BoundaryConstraint = {
    <column: SymbolAccess> "." <boundary: Boundary> "=" <value: BoundaryExpr> =>
        BoundaryConstraint::new(column, boundary, value),
}

BoundaryVariableType: VariableValueExpr = {
    <scalar_value: BoundaryExpr> => 
        VariableValueExpr::Scalar(scalar_value),
    <vector_value: Vector<BoundaryExpr>> => 
        VariableValueExpr::Vector(vector_value),
    <matrix_value: Matrix<BoundaryExpr>> =>
        VariableValueExpr::Matrix(matrix_value),
    "[" <list_comprehension: ListComprehension<BoundaryExpr>> "]" =>
        VariableValueExpr::ListComprehension(list_comprehension),
}

Boundary: Boundary = {
    "first" => Boundary::First,
    "last" => Boundary::Last
}

// --- BOUNDARY CONSTRAINT EXPRESSIONS WITH PRECEDENCE (LOWEST TO HIGHEST) ----------------------

BoundaryExpr: Expression = {
    <lexpr: BoundaryExpr> "+" <rexpr: BoundaryFactor> =>
        Expression::Add(Box::new(lexpr), Box::new(rexpr)),
    <lexpr: BoundaryExpr> "-" <rexpr: BoundaryFactor> =>
        Expression::Sub(Box::new(lexpr), Box::new(rexpr)),
    BoundaryFactor
}

BoundaryFactor: Expression = {
    <lexpr: BoundaryFactor> "*" <rexpr: BoundaryExponent> =>
        Expression::Mul(Box::new(lexpr), Box::new(rexpr)),
    BoundaryExponent
}

BoundaryExponent: Expression = {
    <lexpr: BoundaryExponent> "^" <rexpr: BoundaryAtom> =>
        Expression::Exp(Box::new(lexpr), Box::new(rexpr)),
    BoundaryAtom
}

BoundaryAtom: Expression = {
    "(" <BoundaryExpr> ")",
    <n: Num_u64> => Expression::Const(n),
    <symbol_access: SymbolAccess> => Expression::SymbolAccess(symbol_access),
    <list_folding_type: ListFolding<BoundaryExpr>> => Expression::ListFolding(list_folding_type),
}

// INTEGRITY CONSTRAINTS
// ================================================================================================

IntegrityConstraints: Vec<IntegrityStmt> = {
    "integrity_constraints" ":" <integrity_stmts: IntegrityStmts> => integrity_stmts
}

IntegrityStmts: Vec<IntegrityStmt> = {
    <integrity_stmts_groups: IntegrityStmtGroup+> =>? {
        let integrity_stmts: Vec<IntegrityStmt> = integrity_stmts_groups.into_iter().flatten().collect();
        // check if at least one integrity constraint is defined
        let integrity_constraints_exist = integrity_stmts.iter().any(|stmt| match stmt {
            IntegrityStmt::Constraint(_, _) | IntegrityStmt::ConstraintComprehension(_, _, _) => true,
            _ => false,
        });
        if !integrity_constraints_exist {
            return Err(ParseError::User {
                error: Error::ParseError(
                    MissingIntegrityConstraint(
                        "Declaration of at least one integrity constraint is required".to_string()
                    )
                )
            });
        }
        Ok(integrity_stmts)
    },
    
}

IntegrityStmtGroup: Vec<IntegrityStmt> = {
    "let" <name: Identifier> "=" <integrity_variable_type: IntegrityVariableType> =>
        vec![IntegrityStmt::VariableBinding(VariableBinding::new(name, integrity_variable_type))],
    "enf" <integrity_constraint: IntegrityConstraintExpr> => vec![integrity_constraint],
    "match" "enf" ":" <integrity_stmts: IntegrityConstraintExpr+> => integrity_stmts,
    "enf" <integrity_constraint: IntegrityConstraintExpr>
        <comprehension: ConstraintComprehension<IntegrityExpr>> => match integrity_constraint {
            IntegrityStmt::Constraint(constraint_type, selectors) =>
                return vec![IntegrityStmt::ConstraintComprehension(constraint_type, selectors, comprehension)],
            _ => unreachable!() // this should never happen
        }
}

IntegrityConstraintExpr: IntegrityStmt = {
    <lhs: IntegrityExpr> "=" <rhs: IntegrityExpr> =>
        IntegrityStmt::Constraint(ConstraintType::Inline(IntegrityConstraint::new(lhs, rhs)), None),
    <evaluator_fn_call: EvaluatorFunctionCall> =>
        IntegrityStmt::Constraint(ConstraintType::Evaluator(evaluator_fn_call), None),
    <integrity_stmt_with_selector: IntegrityConstraintWithSelector> =>
        integrity_stmt_with_selector,
}

IntegrityConstraintWithSelector: IntegrityStmt = {
    <lhs: IntegrityExpr> "=" <rhs: IntegrityExpr> "when" <selectors: IntegrityExpr> =>
        IntegrityStmt::Constraint(ConstraintType::Inline(IntegrityConstraint::new(lhs, rhs)),
        Some(selectors)),
    <evaluator_fn_call: EvaluatorFunctionCall> "when" <selectors: IntegrityExpr> =>
        IntegrityStmt::Constraint(ConstraintType::Evaluator(evaluator_fn_call), Some(selectors)),
}

IntegrityVariableType: VariableValueExpr = {
    <scalar_value: IntegrityExpr> =>
        VariableValueExpr::Scalar(scalar_value),
    <vector_value: Vector<IntegrityExpr>> =>
        VariableValueExpr::Vector(vector_value),
    <matrix_value: Matrix<IntegrityExpr>> =>
        VariableValueExpr::Matrix(matrix_value),
    "[" <list_comprehension: ListComprehension<IntegrityExpr>> "]" =>
        VariableValueExpr::ListComprehension(list_comprehension),
}

EvaluatorFunctionCall: EvaluatorFunctionCall = {
    <ident: Identifier> "(" <args: CommaElems<Vector<SymbolAccess>>> ")" =>? {
        if args.len() > 2 {
            return Err(ParseError::User {
                error: Error::ParseError(
                    InvalidEvaluatorFunction(
                        "Evaluator function call must have 1 or 2 arguments".to_string()
                    )
                )
            });
        }
        Ok(EvaluatorFunctionCall::new(ident, args))
    }
}

// --- INTEGRITY CONSTRAINT EXPRESSIONS WITH PRECEDENCE (LOWEST TO HIGHEST) ----------------------

IntegrityExpr: Expression = {
    <lexpr: IntegrityExpr> "&" <rexpr: IntegritySum> =>
        Expression::Mul(Box::new(lexpr), Box::new(rexpr)),
    <lexpr: IntegrityExpr> "|" <rexpr: IntegritySum> =>
        Expression::Sub(
            Box::new(Expression::Add(
                Box::new(lexpr.clone()), Box::new(rexpr.clone()))
            ),
            Box::new(Expression::Mul(
                Box::new(lexpr), Box::new(rexpr))
            )
        ),
    IntegritySum
}

IntegritySum: Expression = {
    <lexpr: IntegritySum> "+" <rexpr: IntegrityFactor> =>
        Expression::Add(Box::new(lexpr), Box::new(rexpr)),
    <lexpr: IntegritySum> "-" <rexpr: IntegrityFactor> =>
        Expression::Sub(Box::new(lexpr), Box::new(rexpr)),
    IntegrityFactor
}

IntegrityFactor: Expression = {
    <lexpr: IntegrityFactor> "*" <rexpr: IntegrityExponent> =>
        Expression::Mul(Box::new(lexpr), Box::new(rexpr)),
    IntegrityExponent
}

IntegrityExponent: Expression = {
    <lexpr: IntegrityExponent> "^" <rexpr: IntegrityAtom> =>
        Expression::Exp(Box::new(lexpr), Box::new(rexpr)),
    IntegrityAtom
}

IntegrityAtom: Expression = {
    "(" <IntegrityExpr> ")",
    <col_access: TraceAccess> => Expression::TraceAccess(col_access),
    <n: Num_u64> => Expression::Const(n),
    "!" <expr: IntegrityAtom> =>
        Expression::Sub(Box::new(Expression::Const(1)), Box::new(expr)),
    <symbol_access: SymbolAccess> => Expression::SymbolAccess(symbol_access),
    <list_folding_type: ListFolding<IntegrityExpr>> =>
        Expression::ListFolding(list_folding_type),
}

// ATOMS
// ================================================================================================

CommaElems<T>: Vec<T> = {
    <e:T> <v:("," <T>)*> => {
        let mut v = v;
        v.insert(0, e);
        v
    }
}

Tuple<T>: Vec<T> = {
    "(" <e:T> <v:("," <T>)+> ")" => {
        let mut v = v;
        v.insert(0, e);
        v
    }
}

Vector<T>: Vec<T> = {
    "[" <elems: CommaElems<T>> "]" => elems
}

Matrix<T>: Vec<Vec<T>> = {
    <elems: Vector<Vector<T>>> => elems
}

Size: u64 = {
    "[" <size: Num_u64> "]" => size
}

Index: usize = {
    "[" <idx: Num_u64> "]" => idx as usize
}

SymbolAccess: SymbolAccess = {
    <symbol_access: SymbolAccessBase> => SymbolAccess::new(symbol_access.0, symbol_access.1, 0),
    <symbol_access: SymbolAccessBase> "'" => SymbolAccess::new(symbol_access.0, symbol_access.1, 1)
}

SymbolAccessBase: (Identifier, AccessType) = {
    <ident: Identifier> => (ident, AccessType::Default),
    <ident: Identifier> "[" <range: Range> "]" => (ident, AccessType::Slice(range)),
    <ident: Identifier> <idx: Index> =>  (ident, AccessType::Vector(idx)),
    <ident: Identifier> <row: Index> <col: Index> => (ident, AccessType::Matrix(row, col)),
    // accessing the random values array
    <ident: RandArrayAccess> => (ident, AccessType::Default),
    <ident: RandArrayAccess> <idx: Index> => (ident, AccessType::Vector(idx))
}

TraceAccess: TraceAccess = {
    "$main" <idx: Index> => TraceAccess::new(0, idx, 1, 0),
    "$main" <idx: Index> "'" => TraceAccess::new(0, idx, 1, 1), 
    "$aux" <idx: Index> => TraceAccess::new(1, idx, 1, 0),
    "$aux" <idx: Index> "'" => TraceAccess::new(1, idx, 1, 1),
}

ConstraintComprehension<T>: ComprehensionContext = {
    "for" <members: Members> "in" <iterables: Iterables> =>?
        if members.len() != iterables.len() {
            Err(ParseError::User {
                error: Error::ParseError(InvalidConstraintComprehension(
                    "Number of members and iterables must match".to_string()
                ))
            })
        } else {
            Ok(members.into_iter().zip(iterables).collect::<Vec<_>>())
        }
}

ListComprehension<T>: ListComprehension = {
    <expr: T> "for" <members: Members> "in" <iterables: Iterables> =>?
        if members.len() != iterables.len() {
            Err(ParseError::User {
                error: Error::ParseError(InvalidListComprehension(
                    "Number of members and iterables must match".to_string()
                ))
            })
        } else {
            Ok(ListComprehension::new(expr, members.into_iter().zip(iterables).collect::<Vec<_>>()))
        }
}

ListFolding<T>: ListFolding = {
    "sum" "(" <list_folding_value_type: ListFoldingValueExpr<T>> ")" =>
        ListFolding::Sum(list_folding_value_type),
    "prod" "(" <list_folding_value_type: ListFoldingValueExpr<T>> ")" =>
        ListFolding::Prod(list_folding_value_type),
}

ListFoldingValueExpr<T>: ListFoldingValueExpr = {
    <name: Identifier> => ListFoldingValueExpr::Identifier(name),
    <vector: Vector<T>> => ListFoldingValueExpr::Vector(vector),
    "[" <list_comprehension: ListComprehension<T>> "]" =>
        ListFoldingValueExpr::ListComprehension(list_comprehension)
}

Members: Vec<Identifier> = {
    <member: Identifier> => vec![member],
    "(" <members: CommaElems<Identifier>> ")" => members
}

Iterables: Vec<Iterable> = {
    <iterable: Iterable> => vec![iterable],
    "(" <iterables: CommaElems<Iterable>> ")" => iterables
}

Iterable: Iterable = {
    <ident: Identifier> => Iterable::Identifier(ident),
    <range: Range> => Iterable::Range(range),
    <ident: Identifier> "[" <range: Range> "]" => Iterable::Slice(ident, range)
}

Range: Range = {
    <start: Num_u64> ".." <end: Num_u64> => Range::new(start as usize, end as usize)
}

RandArrayAccess: Identifier = {
    "$" <n:identifier> => Identifier(format!("${n}"))
}

Identifier: Identifier = {
    <n:identifier> => Identifier(n.to_string())
}

Num_u64: u64 = {
    r"[0-9]+" =>? u64::from_str(&<>)
        .map_err(|_| ParseError::User {
            error: Error::ParseError(InvalidInt(format!("Int too big : {}", <>).to_string()))
        })
}

// LEXER
// ================================================================================================

extern {
    type Error = Error;
    type Location = usize;

    enum Token {
        identifier => Token::Ident(<String>),
        r"[0-9]+" => Token::Num(<String>),
        "def" => Token::Def,
        "let" => Token::Let,
        "for" => Token::For,
        "in" => Token::In,
        "sum" => Token::Sum,
        "prod" => Token::Prod,
        "const" => Token::Const,
        "trace_columns" => Token::TraceColumns,
        "main" => Token::MainDecl,
        "aux" => Token::AuxDecl,
        "public_inputs" => Token::PublicInputs,
        "periodic_columns" => Token::PeriodicColumns,
        "random_values" => Token::RandomValues,
        "boundary_constraints" => Token::BoundaryConstraints,
        "first" => Token::First,
        "last" => Token::Last,
        "integrity_constraints" => Token::IntegrityConstraints,
        "$main" => Token::MainAccess,
        "$aux" => Token::AuxAccess,
        "$" => Token::Rand,
        "ev" => Token::EvaluatorFunction,
        "enf" => Token::Enf,
        "when" => Token::When,
        "match" => Token::Match,
        "'" => Token::Next,
        "=" => Token::Equal,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Mul,
        "^" => Token::Exp,
        "&" => Token::And,
        "|" => Token::Or,
        "!" => Token::Not,
        ":" => Token::Colon,
        "," => Token::Comma,
        "[" => Token::Lsqb,
        "]" => Token::Rsqb,
        "(" => Token::Lparen,
        ")" => Token::Rparen,
        "." => Token::Dot,
        ".." => Token::Range,
    }
}
