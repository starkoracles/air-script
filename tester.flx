open Regdef;
regdef digit_r = charset "0123456789";
regdef upper_r = charset "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
regdef lower_r = charset "abcdefghijklmnopqrstuvwxyz";
regdef letter_r = upper_r | lower_r;
regdef alphanum_r = letter_r | digit_r;

// Temporarily, test script in top level of repo

// To print the time in generated files
// Include subroutines

include "./flx/lib/winterfell_public";
include "./flx/lib/parse_wlog";
include "./flx/lib/gen_winterfell_main";
include "./flx/lib/cairo_verifier";
include "./flx/lib/parse_air";

include "web/low_res_time";
var tod = #{
  open LowResTime;
  return #time_t.gmtime.asctime.[to -1] + " UTC"; // time of day for stamp
};
var stamp = "// TEST: " + tod ;

// ************************************************************* 
// Filenames
// Aero input and output

fun / (x:string, y:string) => Filename::join (x,y);

var input_path_fs = Empty[string];
begin 
  var f = System::argv 1;
  if f == "--help" do
    println$ "Usage: flx tester.flx testdir/<testname>" ;
    println$ "  airscript           : testdir/<testname>.air";
    println$ "  winterfell mainline : testdir/<testname>_winterfell_main.rs";
    println$ "  wm                  : testdir/>testname>_vm.flx";
    println$ "  public_inputs       : testdir/>testname>.public_input_<casename>";
    System::exit 0;
  done
  if f != "" do input_path_fs = ([f]);
  else
    regdef air_r = perl(".*") ".air";
    var air_re = RE2 air_r.render;
    var testcases = FileSystem::regfilesin("test/input",air_re);
    println$ "Found test units: " + testcases.str;
    input_path_fs = map (fun (f:string) => "test/input/" + f.[to -4]) testcases;
  done
end
var good = 0;
var bad = 0;

for input_path_f in input_path_fs do
  process_test(input_path_f);
done

println "TESTS COMPLETE";
println$ "Ran " + (good + bad).str + " tests";
println$ "Pass " + good.str + " tests";
println$ "Fail " + bad.str + " tests";


System::exit(0);

proc stamp_file(f:string) {
  //println$ "[tester] STAMPING " + f;
  var inp = load f;
  //println$ "File length " + inp.len.str;
  save(f,stamp + "\n" + inp);
}

proc process_test(input_path_f: string) {
  println$ "=" * 40;
  println$ "PROCESS TEST " + input_path_f;
  println$ "=" * 40;

  var testname = Filename::basename input_path_f;
  var pathname_f = Filename::dirname input_path_f;

  // INPUTS
  var vm_name_f = pathname_f/(testname + "_vm.flx");
  var input_air_f = pathname_f/(testname + ".air");
  var winterfell_main_f = pathname_f/(testname + "_winterfell_main.rs"); // Hard coded top level Winterfell mainline for this test

  // FIRST STAGE OUTPUTS
  var workspace_f = "test/workspace";
  var workdir = workspace_f/testname;
  C_hack::ignore(Directory::mkdir workspace_f);
  C_hack::ignore(Directory::mkdir workdir);
  var copied_air_f = workdir/(testname + ".air");


  begin
    var result = System::system$ "cp " +input_air_f + " "  +  copied_air_f;
    //println$ "[tester] COPIED " + input_air_f + " to " + copied_air_f + ", result="+result.str; 
    if result != 0 perform System::exit result;
    //stamp_file copied_air_f;
  end



  var generated_cairo_f = workdir/(testname + ".cairo");
  var generated_rust_f = workdir/(testname + ".rs");

  println$ "[tester] processing " + input_air_f + " and " + winterfell_main_f;
  println$ "[tester] generating " + generated_cairo_f + " and " + generated_rust_f
  ;

  // FIXED Winterfell inputs
  var file_to_copy_winterfell_main_to_f = "examples/tests/winterfell/src/main.rs"; 
  var file_to_copy_generated_rust_to_f = "examples/tests/winterfell/src/example.rs"; 

  // FIXED Winterfell outputs
  var public_names_f = "example.public";
  var log_filename_f = "example.wlog";

  // FIXED Protostar inputs
  var protostar_test_filename_f = "examples/tests/cairo/test_air.cairo"; // generated by this Felix script
  var file_to_copy_generated_cairo_to_f = "examples/tests/cairo/example.cairo"; // generated by Aero

   
  // ************************************************************* 
  // 1, RUN AIRSCRIPT 
  begin 
    var result = System::system$ "cargo run --quiet --bin airc -- transpile -i " + copied_air_f ;
    if result != 0 perform System::exit result;
    //println$ "[tester] AIRSCIPT generated " + generated_rust_f + " and " + generated_cairo_f;
    stamp_file generated_cairo_f;
    stamp_file generated_rust_f;
  end

  // ************************************************************* 
  // 2. COPY WINTERFELL VERIFIER (Rust code)
  begin
    var result = System::system$ "cp " + generated_rust_f + " "  +  file_to_copy_generated_rust_to_f;
    if result != 0 perform System::exit result;
    println$ "[tester] COPIED " + generated_rust_f + " to " + file_to_copy_generated_rust_to_f;
  end
  // ************************************************************* 
  // 3. COPY WINTERFELL HAND CODED MAIN (Rust code)
  gen_winterfell_main(file_to_copy_winterfell_main_to_f);
/*
  begin
    var result = System::system$ "cp " +winterfell_main_f + " "  +  file_to_copy_winterfell_main_to_f;
    if result != 0 perform System::exit result;
    //println$ "[tester] COPIED " + winterfell_main_f + " to " + file_to_copy_winterfell_main_to_f;
  end
*/


  proc run_subtest (
    input_f:string, 
    trace_f:string, 
    output_f:string, 
    parse_log_f:string, 
    protostar_workspace_test_filename_f:string,
    protostar_log_f:string
  ) {

    // ************************************************************* 
    // BUILD AND RUN HACKED WINTERFELL FOR THIS AIR
    // We do this for two reasons:
    //
    // 1. To get data out of the prover the verifier needs
    // 2. To get values out of the Rust verifier to check our cairo one
    //
    // The hacked Winterfell contains log outputs which we subsequently
    // parse to get the requisite values.


    // ************************************************************* 
    // 4. RUN WINTERFELL to get required data and results for comparison
    begin
      var result = System::system$ "RUSTFLAGS=-Awarnings cargo run --quiet --bin winterfell --release -- " + 
        input_f + " " + trace_f + " " + output_f
      ;
      if result != 0 perform System::exit result;
      //println$ "[tester] WINTERFELL processing complete"; 
    end

    // ************************************************************* 
    // 5a. PARSE PUBLIC INPUT NAMES FILE
    var pub_data = parse_winterfell_public(public_names_f); 

    // 5b. PARSE WINTERFELL GENERATED LOG FILE 
    var parse_data = parse_wlog(log_filename_f, parse_log_f);


    // ************************************************************* 
    // 6. GENERATE THE CAIRO VERIFIER and SAVE IT
    begin
      var output = gen_cairo_verifier parse_data pub_data;
      save(protostar_workspace_test_filename_f, output);
      save(protostar_test_filename_f, output);
    end

    // ************************************************************* 
    // 7. COPY Rust generated VERIFIER SUBROUTINES TO WHERE PROTOSTAR CAN FIND IT
    begin 
      var result = System::system ("cp " + generated_cairo_f + " " + file_to_copy_generated_cairo_to_f);
      if result != 0 perform System::exit result;
      //println$ "[tester] COPIED " + generated_cairo_f + " to " + file_to_copy_generated_cairo_to_f;
    end

    // ************************************************************* 
    // 8. RUN PROTOSTAR CAIRO VERIFIER TEST
    begin
      var result = System::system$ "protostar --no-color -p unit test > " + protostar_log_f;
      if result == 0 do
        println$ "PASS";
      else
        println$ "***** FAIL *****";
      done
      if result == 0 do ++good; else ++bad; done
      //perform System::exit result;
    end
  }

  // Main test loops
  //
  // run the VM for different trace lengths
  // and for different public inputs

  regdef test_input_r =  perl(testname) ".public_input_" group(alphanum_r+);
  var test_input_re = RE2 test_input_r.render;
  var infiles = FileSystem::regfilesin(pathname_f,test_input_re);

  //println$ "[tester] INPUT FILES " + infiles.str; 
  var cases = Empty[string];
  for file in infiles do
    match Match(test_input_re, file) with
    | None => println$ "Unexpected failure finding test case data names"; System::exit(1);
    | Some v => cases = Snoc(cases, v.1);
    endmatch;
  done
  cases = rev cases;

  //println$ "[tester] INPUT CASES " + cases.str;

  for input_set in cases do
    var input_f = pathname_f/(testname + ".public_input_"+input_set);
    for trace_length in (8,16,32) do
      var trace_f = workdir/testname + ".trace_" + input_set + "_tl_"+trace_length.str;
      var output_f = workdir/testname + ".public_output_"+input_set+"_tl_"+trace_length.str;
      var parse_log_f = workdir/testname + ".parse_log_" input_set+"_tl_" + trace_length.str;
      var vm_log_f = workdir/testname + ".vm_log_" + input_set+"_tl_" + trace_length.str;
      var protostar_workspace_test_filename_f = workdir/testname + ".protostar_test_" + input_set+"_tl_" + trace_length.str;
      var protostar_log_f = workdir/testname + ".protostar_log_" + input_set+"_tl_" + trace_length.str;
      begin
        println$ "[tester] Running VM " + vm_name_f + " for input " input_f + " trace_length " + trace_length.str;

        var result = System::system$ 
          "flx " +vm_name_f + " --input_file=" + input_f + 
           " --trace_file=" + trace_f + " --output_file="+output_f +
           " --trace_length=" + trace_length.str " > " + vm_log_f
        ;
        //println$ "[tester] GENERATED TRACE " + trace_f + ", result="+result.str; 
        if result != 0 perform System::exit result;
      end
      run_subtest(input_f,trace_f,output_f, parse_log_f, protostar_workspace_test_filename_f, protostar_log_f);
    done
  done
}

